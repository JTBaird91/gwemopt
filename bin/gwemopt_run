#!/usr/bin/python

# Copyright (C) 2017 Michael Coughlin
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

""".
Gravitational-wave Electromagnetic Optimization

This script generates an optimized list of pointings and content for
reviewing gravitational-wave skymap likelihoods.

Comments should be e-mailed to michael.coughlin@ligo.org.

"""


import os, sys, glob, optparse, shutil, warnings
import numpy as np

import gwemopt.utils, gwemopt.gracedb
import gwemopt.rankedTilesGenerator, gwemopt.waw
import gwemopt.lightcurve, gwemopt.coverage
import gwemopt.efficiency, gwemopt.plotting

if not os.getenv("DISPLAY", None):
    import matplotlib
    matplotlib.use("agg", warn=False)

__author__ = "Michael Coughlin <michael.coughlin@ligo.org>"
__version__ = 1.0
__date__    = "6/17/2017"

# =============================================================================
#
#                               DEFINITIONS
#
# =============================================================================

def parse_commandline():
    """@Parse the options given on the command-line.
    """
    parser = optparse.OptionParser(usage=__doc__,version=__version__)

    parser.add_option("-c", "--configDirectory", help="GW-EM config file directory.", default ="../config/")
    parser.add_option("-s", "--skymap", help="GW skymap.", default='../output/skymaps/G268556.fits')
    parser.add_option("--do3D",  action="store_true", default=False)

    parser.add_option("-o", "--outputDir", help="output directory",default="../output")
    parser.add_option("-n", "--event", help="event name",default="G268556")

    parser.add_option("--doEvent",  action="store_true", default=False)
    parser.add_option("--doSkymap",  action="store_true", default=False)
    parser.add_option("--doSamples",  action="store_true", default=False)
    parser.add_option("--doStrategy",  action="store_true", default=False)
    parser.add_option("--doPlots",  action="store_true", default=False)
    parser.add_option("--doTiles",  action="store_true", default=False)

    parser.add_option("--doEfficiency",  action="store_true", default=False)
    parser.add_option("-t", "--telescopes", help="Telescope names.",
                      default ="PS1")
    parser.add_option("-d", "--dataFiles", help="Telescope data files.",
                      default ="../data/PS1_GW170104.dat")
    parser.add_option("-l", "--lightcurveFiles", help="Lightcurve files.",
                      default ="../lightcurves/neutron_precursor3.dat,../lightcurves/rpft_m005_v2.dat,../lightcurves/APR4-1215_k1.dat")
    parser.add_option("--Ninj",default=1000,type=int)
    parser.add_option("--Ndet",default=1,type=int)
    parser.add_option("--DScale",default=1.0,type=float)

    parser.add_option("-v", "--verbose", action="store_true", default=False,
                      help="Run verbosely. (Default: False)")

    opts, args = parser.parse_args()

    # show parameters
    if opts.verbose:
        print >> sys.stderr, ""
        print >> sys.stderr, "running gwemopt_run..."
        print >> sys.stderr, "version: %s"%__version__
        print >> sys.stderr, ""
        print >> sys.stderr, "***************** PARAMETERS ********************"
        for o in opts.__dict__.items():
          print >> sys.stderr, o[0]+":"
          print >> sys.stderr, o[1]
        print >> sys.stderr, ""

    return opts

def params_struct(opts):
    """@Creates gwemopt params structure
    @param opts
        gwemopt command line options
    """

    params = {}
    params["config"] = {}
    configFiles = glob.glob("%s/*.config"%opts.configDirectory)
    for configFile in configFiles:
        telescopeName = configFile.split("/")[-1].replace(".config","")
        params["config"][telescopeName] = gwemopt.utils.readParamsFromFile(configFile)

    params["skymap"] = opts.skymap
    params["outputDir"] = opts.outputDir
    params["event"] = opts.event
    params["dataFiles"] = opts.dataFiles.split(",")
    params["telescopes"] = opts.telescopes.split(",")
    params["lightcurveFiles"] = opts.lightcurveFiles.split(",")
    params["Ninj"] = opts.Ninj
    params["Ndet"] = opts.Ndet
    params["DScale"] = opts.DScale

    return params

# =============================================================================
#
#                                    MAIN
#
# =============================================================================

warnings.filterwarnings("ignore")

# Parse command line
opts = parse_commandline()
if not os.path.isdir(opts.outputDir): os.mkdir(opts.outputDir)

params = params_struct(opts)
if opts.doEvent:
    skymapfile, eventinfo = gwemopt.gracedb.get_event(params)
elif opts.doSkymap:
    skymapfile = params["skymap"]
else:
    print "Need to enable --doEvent or --doSkymap"
    exit(0)

# Function to read maps
if opts.do3D:
    map_struct = gwemopt.utils.read_skymap(params, skymapfile, is3D=True)
else:
    map_struct = gwemopt.utils.read_skymap(params, skymapfile, is3D=False)

if opts.doSamples:
    if opts.do3D:
        samples_struct = gwemopt.utils.samples_from_skymap(map_struct,is3D=True)
    else:
        samples_struct = gwemopt.utils.samples_from_skymap(map_struct,is3D=False)
if opts.doPlots:
    gwemopt.plotting.skymap(params,map_struct)

if opts.doTiles:
    tileObj = gwemopt.rankedTilesGenerator.RankedTileGenerator(skymapfile)
    print tileObj
    [ranked_tile_index, ranked_tile_probs] = tileObj.ZTF_RT(resolution=512)
    print ranked_tile_index, ranked_tile_probs

if opts.doStrategy:
    #t = np.arange(0,7,0.25)
    #t = np.arange(0,7,1/24.0)
    t = np.arange(0,2,1/96.0)
    cr90 = map_struct["cumprob"] < 0.9
    detmaps = gwemopt.waw.detectability_maps(params, t, map_struct, samples_struct, verbose=True, limit_to_region=cr90)
    # create strategy
    T_available = (1.,1.125,2.,2.125,3.,3.125,4.,4.125,5.,5.125) # 3h per night, starting 24h after merger
    Afov = params["config"][params["telescopes"][0]]["FOV"]**2
    T_int = params["config"][params["telescopes"][0]]["exposuretime"]
    strategy_struct = gwemopt.waw.construct_followup_strategy(map_struct["prob"],detmaps,t,Afov,T_int,T_available,limit_to_region=cr90)

    if opts.doPlots:
        gwemopt.plotting.strategy(params,detmaps,t,strategy_struct)

if opts.doEfficiency:
    coverage_struct = gwemopt.coverage.read_files(params)

    lightcurve_structs = gwemopt.lightcurve.read_files(params["lightcurveFiles"])
    efficiency_structs = {}
    for key in lightcurve_structs.iterkeys():
        lightcurve_struct = lightcurve_structs[key]
        efficiency_struct = gwemopt.efficiency.compute_efficiency(params,map_struct, eventinfo, lightcurve_struct, coverage_struct)
        efficiency_structs[key] = efficiency_struct
        efficiency_structs[key]["legend_label"] = lightcurve_struct["legend_label"]

    if opts.doPlots: 
        gwemopt.plotting.efficiency(params, map_struct, coverage_struct, efficiency_structs)
