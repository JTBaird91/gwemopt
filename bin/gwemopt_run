#!/usr/bin/python

# Copyright (C) 2017 Michael Coughlin
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

""".
Gravitational-wave Electromagnetic Optimization

This script generates an optimized list of pointings and content for
reviewing gravitational-wave skymap likelihoods.

Comments should be e-mailed to michael.coughlin@ligo.org.

"""


import os, sys, glob, optparse, shutil, warnings
import numpy as np
import healpy as hp

import gwemopt.utils, gwemopt.gracedb
import gwemopt.rankedTilesGenerator, gwemopt.waw
import gwemopt.lightcurve, gwemopt.coverage
import gwemopt.efficiency, gwemopt.plotting
import gwemopt.moc, gwemopt.catalog
import gwemopt.tiles

if not os.getenv("DISPLAY", None):
    import matplotlib
    matplotlib.use("agg", warn=False)

__author__ = "Michael Coughlin <michael.coughlin@ligo.org>"
__version__ = 1.0
__date__    = "6/17/2017"

# =============================================================================
#
#                               DEFINITIONS
#
# =============================================================================

def parse_commandline():
    """@Parse the options given on the command-line.
    """
    parser = optparse.OptionParser(usage=__doc__,version=__version__)

    parser.add_option("-c", "--configDirectory", help="GW-EM config file directory.", default ="../config/")
    parser.add_option("-s", "--skymap", help="GW skymap.", default='../output/skymaps/G268556.fits')
    parser.add_option("--do3D",  action="store_true", default=False)

    parser.add_option("-o", "--outputDir", help="output directory",default="../output")
    parser.add_option("-n", "--event", help="event name",default="G268556")
    parser.add_option("--tilingDir", help="tiling directory",default="../tiling")

    parser.add_option("--doEvent",  action="store_true", default=False)
    parser.add_option("--doSkymap",  action="store_true", default=False)
    parser.add_option("--doSamples",  action="store_true", default=False)
    parser.add_option("--doWAW",  action="store_true", default=False)
    parser.add_option("--doCoverage",  action="store_true", default=False)
    parser.add_option("--doPlots",  action="store_true", default=False)
    parser.add_option("--doTiles",  action="store_true", default=False)
    parser.add_option("--tilesType", help="tiling type",default="moc")
    parser.add_option("--doGreedy",  action="store_true", default=False)
    parser.add_option("--doCatalog",  action="store_true", default=False)

    parser.add_option("--doEfficiency",  action="store_true", default=False)
    #parser.add_option("-t", "--telescopes", help="Telescope names.",
    #                  default ="PS1")
    #parser.add_option("-d", "--coverageFiles", help="Telescope data files.",
    #                  default ="../data/PS1_GW170104.dat")
    parser.add_option("-t", "--telescopes", help="Telescope names.",
                      default ="ATLAS")
    parser.add_option("-d", "--coverageFiles", help="Telescope coverage files.",
                      default ="../data/ATLAS_GW170104.dat")
    parser.add_option("-l", "--lightcurveFiles", help="Lightcurve files.",
                      default ="../lightcurves/neutron_precursor3.dat,../lightcurves/rpft_m005_v2.dat,../lightcurves/APR4-1215_k1.dat")
    parser.add_option("--Ninj",default=1000,type=int)
    parser.add_option("--Ndet",default=1,type=int)
    parser.add_option("--nside",default=256,type=int)
    parser.add_option("--DScale",default=1.0,type=float)
    parser.add_option("--Tobs",default="1.0,1.5,2.0,2.5,3.0,3.5,4.0,4.5,5.0,5.5")

    parser.add_option("-v", "--verbose", action="store_true", default=False,
                      help="Run verbosely. (Default: False)")

    opts, args = parser.parse_args()

    # show parameters
    if opts.verbose:
        print >> sys.stderr, ""
        print >> sys.stderr, "running gwemopt_run..."
        print >> sys.stderr, "version: %s"%__version__
        print >> sys.stderr, ""
        print >> sys.stderr, "***************** PARAMETERS ********************"
        for o in opts.__dict__.items():
          print >> sys.stderr, o[0]+":"
          print >> sys.stderr, o[1]
        print >> sys.stderr, ""

    return opts

def params_struct(opts):
    """@Creates gwemopt params structure
    @param opts
        gwemopt command line options
    """

    params = {}
    params["config"] = {}
    configFiles = glob.glob("%s/*.config"%opts.configDirectory)
    for configFile in configFiles:
        telescopeName = configFile.split("/")[-1].replace(".config","")
        params["config"][telescopeName] = gwemopt.utils.readParamsFromFile(configFile)
        if "tesselationFile" in params["config"][telescopeName]:
            params["config"][telescopeName]["tesselation"] = np.loadtxt(params["config"][telescopeName]["tesselationFile"])

    params["skymap"] = opts.skymap
    params["outputDir"] = opts.outputDir
    params["tilingDir"] = opts.tilingDir
    params["event"] = opts.event
    params["coverageFiles"] = opts.coverageFiles.split(",")
    params["telescopes"] = opts.telescopes.split(",")
    params["lightcurveFiles"] = opts.lightcurveFiles.split(",")
    params["tilesType"] = opts.tilesType
    params["Ninj"] = opts.Ninj
    params["Ndet"] = opts.Ndet
    params["DScale"] = opts.DScale
    params["nside"] = opts.nside
    params["Tobs"] = np.array(opts.Tobs.split(","),dtype=np.float)

    return params

# =============================================================================
#
#                                    MAIN
#
# =============================================================================

warnings.filterwarnings("ignore")

# Parse command line
opts = parse_commandline()
if not os.path.isdir(opts.outputDir): os.mkdir(opts.outputDir)

params = params_struct(opts)

if opts.doEfficiency:
    efficiencyTypes = [opts.doGreedy, opts.doWAW,opts.doCoverage]
    efficiencyCount = sum(1 for x in efficiencyTypes if x)
    if not efficiencyCount == 1:
        print "Need to enable --doGreedy, --doWAW, or --doCoverage"
        exit(0)

if opts.doEvent:
    params["skymap"], eventinfo = gwemopt.gracedb.get_event(params)
elif opts.doSkymap:
    params["skymap"]
else:
    print "Need to enable --doEvent or --doSkymap"
    exit(0)

print "Loading skymap..."
# Function to read maps
if opts.do3D:
    map_struct = gwemopt.utils.read_skymap(params, is3D=True)
else:
    map_struct = gwemopt.utils.read_skymap(params, is3D=False)

if opts.doPlots:
    print "Plotting skymap..."
    gwemopt.plotting.skymap(params,map_struct)

if opts.doSamples:
    print "Generating samples from skymap..."
    if opts.do3D:
        samples_struct = gwemopt.utils.samples_from_skymap(map_struct,is3D=True)
    else:
        samples_struct = gwemopt.utils.samples_from_skymap(map_struct,is3D=False)

if opts.doTiles:
    if params["tilesType"] == "moc":
        print "Generating MOC struct..."
        moc_structs = gwemopt.moc.create_moc(params)
        tile_structs = gwemopt.tiles.moc(params, map_struct, moc_structs)
    elif params["tilesType"] == "ranked":
        print "Generating ranked struct..."
        tile_structs = gwemopt.tiles.rankedTiles(params)
    else:
        print "Need tilesType to be moc or ranked"
        exit(0)

    if opts.doPlots:
        print "Plotting tiles struct..."
        gwemopt.plotting.tiles(params, map_struct, tile_structs)

if opts.doCatalog:
    print "Generating catalog..."
    catalog_struct = gwemopt.catalog.get_catalog(params, map_struct)

if opts.doGreedy:
    print "Generating greedy schedule..."
    coverage_struct = gwemopt.coverage.greedy(params, eventinfo, tile_structs) 
elif opts.doWAW:
    print "Generating WAW schedule..."
    if opts.doTiles:
        coverage_struct = gwemopt.coverage.waw(params, eventinfo, map_struct, tile_structs = tile_structs, doPlots = opts.doPlots)
    else:
        coverage_struct = gwemopt.coverage.waw(params, eventinfo, map_struct, tile_structs = None, doPlots = opts.doPlots)
elif opts.doCoverage:
    print "Reading coverage from file..."
    coverage_struct = gwemopt.coverage.read_coverage_files(params)

if opts.doGreedy or opts.doWAW or opts.doCoverage:
    print "Summary of coverage..."
    gwemopt.coverage.summary(params,map_struct,eventinfo,coverage_struct)

    if opts.doPlots:
        print "Plotting coverage..."
        gwemopt.plotting.coverage(params, map_struct, coverage_struct)

if opts.doEfficiency:
    print "Computing efficiency..."
    lightcurve_structs = gwemopt.lightcurve.read_files(params["lightcurveFiles"])
    efficiency_structs = {}
    for key in lightcurve_structs.iterkeys():
        lightcurve_struct = lightcurve_structs[key]
        efficiency_struct = gwemopt.efficiency.compute_efficiency(params,map_struct, eventinfo, lightcurve_struct, coverage_struct)
        efficiency_structs[key] = efficiency_struct
        efficiency_structs[key]["legend_label"] = lightcurve_struct["legend_label"]

    if opts.doPlots: 
        print "Plotting efficiency..."
        gwemopt.plotting.efficiency(params, map_struct, efficiency_structs)
